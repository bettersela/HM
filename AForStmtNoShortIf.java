/* This file was generated by SableCC (http://www.sablecc.org/). */

package decaf.node;

import decaf.analysis.*;

@SuppressWarnings("nls")
public final class AForStmtNoShortIf extends PForStmtNoShortIf
{
    private TFor _for_;
    private TLPar _lPar_;
    private PAssignExpr _assignExpr_;
    private TSemi _semi_;
    private PBoolExpr _boolExpr_;
    private TSemi _s2_;
    private PAssignExpr _a2_;
    private TRPar _rPar_;
    private PStmtNoShortIf _stmtNoShortIf_;

    public AForStmtNoShortIf()
    {
        // Constructor
    }

    public AForStmtNoShortIf(
        @SuppressWarnings("hiding") TFor _for_,
        @SuppressWarnings("hiding") TLPar _lPar_,
        @SuppressWarnings("hiding") PAssignExpr _assignExpr_,
        @SuppressWarnings("hiding") TSemi _semi_,
        @SuppressWarnings("hiding") PBoolExpr _boolExpr_,
        @SuppressWarnings("hiding") TSemi _s2_,
        @SuppressWarnings("hiding") PAssignExpr _a2_,
        @SuppressWarnings("hiding") TRPar _rPar_,
        @SuppressWarnings("hiding") PStmtNoShortIf _stmtNoShortIf_)
    {
        // Constructor
        setFor(_for_);

        setLPar(_lPar_);

        setAssignExpr(_assignExpr_);

        setSemi(_semi_);

        setBoolExpr(_boolExpr_);

        setS2(_s2_);

        setA2(_a2_);

        setRPar(_rPar_);

        setStmtNoShortIf(_stmtNoShortIf_);

    }

    @Override
    public Object clone()
    {
        return new AForStmtNoShortIf(
            cloneNode(this._for_),
            cloneNode(this._lPar_),
            cloneNode(this._assignExpr_),
            cloneNode(this._semi_),
            cloneNode(this._boolExpr_),
            cloneNode(this._s2_),
            cloneNode(this._a2_),
            cloneNode(this._rPar_),
            cloneNode(this._stmtNoShortIf_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAForStmtNoShortIf(this);
    }

    public TFor getFor()
    {
        return this._for_;
    }

    public void setFor(TFor node)
    {
        if(this._for_ != null)
        {
            this._for_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._for_ = node;
    }

    public TLPar getLPar()
    {
        return this._lPar_;
    }

    public void setLPar(TLPar node)
    {
        if(this._lPar_ != null)
        {
            this._lPar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lPar_ = node;
    }

    public PAssignExpr getAssignExpr()
    {
        return this._assignExpr_;
    }

    public void setAssignExpr(PAssignExpr node)
    {
        if(this._assignExpr_ != null)
        {
            this._assignExpr_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._assignExpr_ = node;
    }

    public TSemi getSemi()
    {
        return this._semi_;
    }

    public void setSemi(TSemi node)
    {
        if(this._semi_ != null)
        {
            this._semi_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._semi_ = node;
    }

    public PBoolExpr getBoolExpr()
    {
        return this._boolExpr_;
    }

    public void setBoolExpr(PBoolExpr node)
    {
        if(this._boolExpr_ != null)
        {
            this._boolExpr_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._boolExpr_ = node;
    }

    public TSemi getS2()
    {
        return this._s2_;
    }

    public void setS2(TSemi node)
    {
        if(this._s2_ != null)
        {
            this._s2_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._s2_ = node;
    }

    public PAssignExpr getA2()
    {
        return this._a2_;
    }

    public void setA2(PAssignExpr node)
    {
        if(this._a2_ != null)
        {
            this._a2_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._a2_ = node;
    }

    public TRPar getRPar()
    {
        return this._rPar_;
    }

    public void setRPar(TRPar node)
    {
        if(this._rPar_ != null)
        {
            this._rPar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rPar_ = node;
    }

    public PStmtNoShortIf getStmtNoShortIf()
    {
        return this._stmtNoShortIf_;
    }

    public void setStmtNoShortIf(PStmtNoShortIf node)
    {
        if(this._stmtNoShortIf_ != null)
        {
            this._stmtNoShortIf_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._stmtNoShortIf_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._for_)
            + toString(this._lPar_)
            + toString(this._assignExpr_)
            + toString(this._semi_)
            + toString(this._boolExpr_)
            + toString(this._s2_)
            + toString(this._a2_)
            + toString(this._rPar_)
            + toString(this._stmtNoShortIf_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._for_ == child)
        {
            this._for_ = null;
            return;
        }

        if(this._lPar_ == child)
        {
            this._lPar_ = null;
            return;
        }

        if(this._assignExpr_ == child)
        {
            this._assignExpr_ = null;
            return;
        }

        if(this._semi_ == child)
        {
            this._semi_ = null;
            return;
        }

        if(this._boolExpr_ == child)
        {
            this._boolExpr_ = null;
            return;
        }

        if(this._s2_ == child)
        {
            this._s2_ = null;
            return;
        }

        if(this._a2_ == child)
        {
            this._a2_ = null;
            return;
        }

        if(this._rPar_ == child)
        {
            this._rPar_ = null;
            return;
        }

        if(this._stmtNoShortIf_ == child)
        {
            this._stmtNoShortIf_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._for_ == oldChild)
        {
            setFor((TFor) newChild);
            return;
        }

        if(this._lPar_ == oldChild)
        {
            setLPar((TLPar) newChild);
            return;
        }

        if(this._assignExpr_ == oldChild)
        {
            setAssignExpr((PAssignExpr) newChild);
            return;
        }

        if(this._semi_ == oldChild)
        {
            setSemi((TSemi) newChild);
            return;
        }

        if(this._boolExpr_ == oldChild)
        {
            setBoolExpr((PBoolExpr) newChild);
            return;
        }

        if(this._s2_ == oldChild)
        {
            setS2((TSemi) newChild);
            return;
        }

        if(this._a2_ == oldChild)
        {
            setA2((PAssignExpr) newChild);
            return;
        }

        if(this._rPar_ == oldChild)
        {
            setRPar((TRPar) newChild);
            return;
        }

        if(this._stmtNoShortIf_ == oldChild)
        {
            setStmtNoShortIf((PStmtNoShortIf) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
