/* This file was generated by SableCC (http://www.sablecc.org/). */

package decaf.analysis;

import decaf.node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object o);
    Object getOut(Node node);
    void setOut(Node node, Object o);

    void caseStart(Start node);
    void caseAProgram(AProgram node);
    void caseAIntType(AIntType node);
    void caseAFloatType(AFloatType node);
    void caseADeclaration(ADeclaration node);
    void caseAIdentlist(AIdentlist node);
    void caseADclStmt(ADclStmt node);
    void caseAStmtNoTrlrStmt(AStmtNoTrlrStmt node);
    void caseAIfStStmt(AIfStStmt node);
    void caseAIfElseStStmt(AIfElseStStmt node);
    void caseAWhileStStmt(AWhileStStmt node);
    void caseAForStStmt(AForStStmt node);
    void caseAUntilStStmt(AUntilStStmt node);
    void caseADoWhileStStmt(ADoWhileStStmt node);
    void caseAStmtNoTrlrStmtNoShortIf(AStmtNoTrlrStmtNoShortIf node);
    void caseAIfElseNoShortStmtNoShortIf(AIfElseNoShortStmtNoShortIf node);
    void caseAWhileNoShortStmtNoShortIf(AWhileNoShortStmtNoShortIf node);
    void caseAForNoShortStmtNoShortIf(AForNoShortStmtNoShortIf node);
    void caseACompoundStmtNoTrailer(ACompoundStmtNoTrailer node);
    void caseANullStmtNoTrailer(ANullStmtNoTrailer node);
    void caseAAssignStmtNoTrailer(AAssignStmtNoTrailer node);
    void caseAMultassignStmtNoTrailer(AMultassignStmtNoTrailer node);
    void caseAPlusassignStmtNoTrailer(APlusassignStmtNoTrailer node);
    void caseAAssignStmt(AAssignStmt node);
    void caseAMultassignStmt(AMultassignStmt node);
    void caseAPlusassignStmt(APlusassignStmt node);
    void caseAForStmt(AForStmt node);
    void caseAForStmtNoShortIf(AForStmtNoShortIf node);
    void caseAWhileStmt(AWhileStmt node);
    void caseAWhileStmtNoShortIf(AWhileStmtNoShortIf node);
    void caseAIfStmt(AIfStmt node);
    void caseAIfElseStmt(AIfElseStmt node);
    void caseAIfElseStmtNoShortIf(AIfElseStmtNoShortIf node);
    void caseAUntilStmt(AUntilStmt node);
    void caseADoWhileStmt(ADoWhileStmt node);
    void caseACompoundStmt(ACompoundStmt node);
    void caseABoolExpr(ABoolExpr node);
    void caseAAssnExpr(AAssnExpr node);
    void caseARvalExpr(ARvalExpr node);
    void caseAMultassnExpr(AMultassnExpr node);
    void caseAPlusassnExpr(APlusassnExpr node);
    void caseAAssignExpr(AAssignExpr node);
    void caseAMultassignExpr(AMultassignExpr node);
    void caseAPlusassignExpr(APlusassignExpr node);
    void caseAPlusRvalue(APlusRvalue node);
    void caseAMinusRvalue(AMinusRvalue node);
    void caseATermRvalue(ATermRvalue node);
    void caseAMultTerm(AMultTerm node);
    void caseADivTerm(ADivTerm node);
    void caseAFacTerm(AFacTerm node);
    void caseAParsFactor(AParsFactor node);
    void caseAUplusFactor(AUplusFactor node);
    void caseAUminusFactor(AUminusFactor node);
    void caseAIdFactor(AIdFactor node);
    void caseANumFactor(ANumFactor node);

    void caseTComment1(TComment1 node);
    void caseTComment2(TComment2 node);
    void caseTComment3(TComment3 node);
    void caseTComment4(TComment4 node);
    void caseTSpace(TSpace node);
    void caseTClas(TClas node);
    void caseTPublic(TPublic node);
    void caseTStatic(TStatic node);
    void caseTVoid(TVoid node);
    void caseTMain(TMain node);
    void caseTString(TString node);
    void caseTInt(TInt node);
    void caseTFloat(TFloat node);
    void caseTFor(TFor node);
    void caseTWhile(TWhile node);
    void caseTIf(TIf node);
    void caseTElse(TElse node);
    void caseTAssign(TAssign node);
    void caseTDo(TDo node);
    void caseTUntil(TUntil node);
    void caseTCompare(TCompare node);
    void caseTPlus(TPlus node);
    void caseTMinus(TMinus node);
    void caseTMult(TMult node);
    void caseTDiv(TDiv node);
    void caseTLPar(TLPar node);
    void caseTRPar(TRPar node);
    void caseTLBrace(TLBrace node);
    void caseTRBrace(TRBrace node);
    void caseTLBracket(TLBracket node);
    void caseTRBracket(TRBracket node);
    void caseTComma(TComma node);
    void caseTSemi(TSemi node);
    void caseTMultassign(TMultassign node);
    void caseTPlusassign(TPlusassign node);
    void caseTIdentifier(TIdentifier node);
    void caseTNumber(TNumber node);
    void caseTMisc(TMisc node);
    void caseEOF(EOF node);
    void caseInvalidToken(InvalidToken node);
}
