/* This file was generated by SableCC (http://www.sablecc.org/). */

package decaf.analysis;

import java.util.*;
import decaf.node.*;

public class DepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getPProgram().apply(this);
        node.getEOF().apply(this);
        outStart(node);
    }

    public void inAProgram(AProgram node)
    {
        defaultIn(node);
    }

    public void outAProgram(AProgram node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAProgram(AProgram node)
    {
        inAProgram(node);
        if(node.getClas() != null)
        {
            node.getClas().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getLBrace() != null)
        {
            node.getLBrace().apply(this);
        }
        if(node.getPublic() != null)
        {
            node.getPublic().apply(this);
        }
        if(node.getStatic() != null)
        {
            node.getStatic().apply(this);
        }
        if(node.getVoid() != null)
        {
            node.getVoid().apply(this);
        }
        if(node.getMain() != null)
        {
            node.getMain().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getString() != null)
        {
            node.getString().apply(this);
        }
        if(node.getLBracket() != null)
        {
            node.getLBracket().apply(this);
        }
        if(node.getRBracket() != null)
        {
            node.getRBracket().apply(this);
        }
        if(node.getArg() != null)
        {
            node.getArg().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getCompoundStmt() != null)
        {
            node.getCompoundStmt().apply(this);
        }
        if(node.getRBrace() != null)
        {
            node.getRBrace().apply(this);
        }
        outAProgram(node);
    }

    public void inAIntType(AIntType node)
    {
        defaultIn(node);
    }

    public void outAIntType(AIntType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntType(AIntType node)
    {
        inAIntType(node);
        if(node.getInt() != null)
        {
            node.getInt().apply(this);
        }
        outAIntType(node);
    }

    public void inAFloatType(AFloatType node)
    {
        defaultIn(node);
    }

    public void outAFloatType(AFloatType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFloatType(AFloatType node)
    {
        inAFloatType(node);
        if(node.getFloat() != null)
        {
            node.getFloat().apply(this);
        }
        outAFloatType(node);
    }

    public void inADeclaration(ADeclaration node)
    {
        defaultIn(node);
    }

    public void outADeclaration(ADeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADeclaration(ADeclaration node)
    {
        inADeclaration(node);
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        {
            List<PIdentlist> copy = new ArrayList<PIdentlist>(node.getIdentlist());
            for(PIdentlist e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        outADeclaration(node);
    }

    public void inAIdentlist(AIdentlist node)
    {
        defaultIn(node);
    }

    public void outAIdentlist(AIdentlist node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdentlist(AIdentlist node)
    {
        inAIdentlist(node);
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAIdentlist(node);
    }

    public void inADclStmt(ADclStmt node)
    {
        defaultIn(node);
    }

    public void outADclStmt(ADclStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADclStmt(ADclStmt node)
    {
        inADclStmt(node);
        if(node.getDeclaration() != null)
        {
            node.getDeclaration().apply(this);
        }
        outADclStmt(node);
    }

    public void inAStmtNoTrlrStmt(AStmtNoTrlrStmt node)
    {
        defaultIn(node);
    }

    public void outAStmtNoTrlrStmt(AStmtNoTrlrStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStmtNoTrlrStmt(AStmtNoTrlrStmt node)
    {
        inAStmtNoTrlrStmt(node);
        if(node.getStmtNoTrailer() != null)
        {
            node.getStmtNoTrailer().apply(this);
        }
        outAStmtNoTrlrStmt(node);
    }

    public void inAIfStStmt(AIfStStmt node)
    {
        defaultIn(node);
    }

    public void outAIfStStmt(AIfStStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfStStmt(AIfStStmt node)
    {
        inAIfStStmt(node);
        if(node.getIfStmt() != null)
        {
            node.getIfStmt().apply(this);
        }
        outAIfStStmt(node);
    }

    public void inAIfElseStStmt(AIfElseStStmt node)
    {
        defaultIn(node);
    }

    public void outAIfElseStStmt(AIfElseStStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfElseStStmt(AIfElseStStmt node)
    {
        inAIfElseStStmt(node);
        if(node.getIfElseStmt() != null)
        {
            node.getIfElseStmt().apply(this);
        }
        outAIfElseStStmt(node);
    }

    public void inAWhileStStmt(AWhileStStmt node)
    {
        defaultIn(node);
    }

    public void outAWhileStStmt(AWhileStStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWhileStStmt(AWhileStStmt node)
    {
        inAWhileStStmt(node);
        if(node.getWhileStmt() != null)
        {
            node.getWhileStmt().apply(this);
        }
        outAWhileStStmt(node);
    }

    public void inAForStStmt(AForStStmt node)
    {
        defaultIn(node);
    }

    public void outAForStStmt(AForStStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAForStStmt(AForStStmt node)
    {
        inAForStStmt(node);
        if(node.getForStmt() != null)
        {
            node.getForStmt().apply(this);
        }
        outAForStStmt(node);
    }

    public void inAUntilStStmt(AUntilStStmt node)
    {
        defaultIn(node);
    }

    public void outAUntilStStmt(AUntilStStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUntilStStmt(AUntilStStmt node)
    {
        inAUntilStStmt(node);
        if(node.getUntilStmt() != null)
        {
            node.getUntilStmt().apply(this);
        }
        outAUntilStStmt(node);
    }

    public void inADoWhileStStmt(ADoWhileStStmt node)
    {
        defaultIn(node);
    }

    public void outADoWhileStStmt(ADoWhileStStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADoWhileStStmt(ADoWhileStStmt node)
    {
        inADoWhileStStmt(node);
        if(node.getDoWhileStmt() != null)
        {
            node.getDoWhileStmt().apply(this);
        }
        outADoWhileStStmt(node);
    }

    public void inAStmtNoTrlrStmtNoShortIf(AStmtNoTrlrStmtNoShortIf node)
    {
        defaultIn(node);
    }

    public void outAStmtNoTrlrStmtNoShortIf(AStmtNoTrlrStmtNoShortIf node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStmtNoTrlrStmtNoShortIf(AStmtNoTrlrStmtNoShortIf node)
    {
        inAStmtNoTrlrStmtNoShortIf(node);
        if(node.getStmtNoTrailer() != null)
        {
            node.getStmtNoTrailer().apply(this);
        }
        outAStmtNoTrlrStmtNoShortIf(node);
    }

    public void inAIfElseNoShortStmtNoShortIf(AIfElseNoShortStmtNoShortIf node)
    {
        defaultIn(node);
    }

    public void outAIfElseNoShortStmtNoShortIf(AIfElseNoShortStmtNoShortIf node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfElseNoShortStmtNoShortIf(AIfElseNoShortStmtNoShortIf node)
    {
        inAIfElseNoShortStmtNoShortIf(node);
        if(node.getIfElseStmtNoShortIf() != null)
        {
            node.getIfElseStmtNoShortIf().apply(this);
        }
        outAIfElseNoShortStmtNoShortIf(node);
    }

    public void inAWhileNoShortStmtNoShortIf(AWhileNoShortStmtNoShortIf node)
    {
        defaultIn(node);
    }

    public void outAWhileNoShortStmtNoShortIf(AWhileNoShortStmtNoShortIf node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWhileNoShortStmtNoShortIf(AWhileNoShortStmtNoShortIf node)
    {
        inAWhileNoShortStmtNoShortIf(node);
        if(node.getWhileStmtNoShortIf() != null)
        {
            node.getWhileStmtNoShortIf().apply(this);
        }
        outAWhileNoShortStmtNoShortIf(node);
    }

    public void inAForNoShortStmtNoShortIf(AForNoShortStmtNoShortIf node)
    {
        defaultIn(node);
    }

    public void outAForNoShortStmtNoShortIf(AForNoShortStmtNoShortIf node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAForNoShortStmtNoShortIf(AForNoShortStmtNoShortIf node)
    {
        inAForNoShortStmtNoShortIf(node);
        if(node.getForStmtNoShortIf() != null)
        {
            node.getForStmtNoShortIf().apply(this);
        }
        outAForNoShortStmtNoShortIf(node);
    }

    public void inACompoundStmtNoTrailer(ACompoundStmtNoTrailer node)
    {
        defaultIn(node);
    }

    public void outACompoundStmtNoTrailer(ACompoundStmtNoTrailer node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACompoundStmtNoTrailer(ACompoundStmtNoTrailer node)
    {
        inACompoundStmtNoTrailer(node);
        if(node.getCompoundStmt() != null)
        {
            node.getCompoundStmt().apply(this);
        }
        outACompoundStmtNoTrailer(node);
    }

    public void inANullStmtNoTrailer(ANullStmtNoTrailer node)
    {
        defaultIn(node);
    }

    public void outANullStmtNoTrailer(ANullStmtNoTrailer node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANullStmtNoTrailer(ANullStmtNoTrailer node)
    {
        inANullStmtNoTrailer(node);
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        outANullStmtNoTrailer(node);
    }

    public void inAAssignStmtNoTrailer(AAssignStmtNoTrailer node)
    {
        defaultIn(node);
    }

    public void outAAssignStmtNoTrailer(AAssignStmtNoTrailer node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAssignStmtNoTrailer(AAssignStmtNoTrailer node)
    {
        inAAssignStmtNoTrailer(node);
        if(node.getAssignStmt() != null)
        {
            node.getAssignStmt().apply(this);
        }
        outAAssignStmtNoTrailer(node);
    }

    public void inAMultassignStmtNoTrailer(AMultassignStmtNoTrailer node)
    {
        defaultIn(node);
    }

    public void outAMultassignStmtNoTrailer(AMultassignStmtNoTrailer node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultassignStmtNoTrailer(AMultassignStmtNoTrailer node)
    {
        inAMultassignStmtNoTrailer(node);
        if(node.getMultassignStmt() != null)
        {
            node.getMultassignStmt().apply(this);
        }
        outAMultassignStmtNoTrailer(node);
    }

    public void inAPlusassignStmtNoTrailer(APlusassignStmtNoTrailer node)
    {
        defaultIn(node);
    }

    public void outAPlusassignStmtNoTrailer(APlusassignStmtNoTrailer node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPlusassignStmtNoTrailer(APlusassignStmtNoTrailer node)
    {
        inAPlusassignStmtNoTrailer(node);
        if(node.getPlusassignStmt() != null)
        {
            node.getPlusassignStmt().apply(this);
        }
        outAPlusassignStmtNoTrailer(node);
    }

    public void inAAssignStmt(AAssignStmt node)
    {
        defaultIn(node);
    }

    public void outAAssignStmt(AAssignStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAssignStmt(AAssignStmt node)
    {
        inAAssignStmt(node);
        if(node.getAssignExpr() != null)
        {
            node.getAssignExpr().apply(this);
        }
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        outAAssignStmt(node);
    }

    public void inAMultassignStmt(AMultassignStmt node)
    {
        defaultIn(node);
    }

    public void outAMultassignStmt(AMultassignStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultassignStmt(AMultassignStmt node)
    {
        inAMultassignStmt(node);
        if(node.getMultassignExpr() != null)
        {
            node.getMultassignExpr().apply(this);
        }
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        outAMultassignStmt(node);
    }

    public void inAPlusassignStmt(APlusassignStmt node)
    {
        defaultIn(node);
    }

    public void outAPlusassignStmt(APlusassignStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPlusassignStmt(APlusassignStmt node)
    {
        inAPlusassignStmt(node);
        if(node.getPlusassignExpr() != null)
        {
            node.getPlusassignExpr().apply(this);
        }
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        outAPlusassignStmt(node);
    }

    public void inAForStmt(AForStmt node)
    {
        defaultIn(node);
    }

    public void outAForStmt(AForStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAForStmt(AForStmt node)
    {
        inAForStmt(node);
        if(node.getFor() != null)
        {
            node.getFor().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getAssignExpr() != null)
        {
            node.getAssignExpr().apply(this);
        }
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        if(node.getBoolExpr() != null)
        {
            node.getBoolExpr().apply(this);
        }
        if(node.getS2() != null)
        {
            node.getS2().apply(this);
        }
        if(node.getA2() != null)
        {
            node.getA2().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getStmt() != null)
        {
            node.getStmt().apply(this);
        }
        outAForStmt(node);
    }

    public void inAForStmtNoShortIf(AForStmtNoShortIf node)
    {
        defaultIn(node);
    }

    public void outAForStmtNoShortIf(AForStmtNoShortIf node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAForStmtNoShortIf(AForStmtNoShortIf node)
    {
        inAForStmtNoShortIf(node);
        if(node.getFor() != null)
        {
            node.getFor().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getAssignExpr() != null)
        {
            node.getAssignExpr().apply(this);
        }
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        if(node.getBoolExpr() != null)
        {
            node.getBoolExpr().apply(this);
        }
        if(node.getS2() != null)
        {
            node.getS2().apply(this);
        }
        if(node.getA2() != null)
        {
            node.getA2().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getStmtNoShortIf() != null)
        {
            node.getStmtNoShortIf().apply(this);
        }
        outAForStmtNoShortIf(node);
    }

    public void inAWhileStmt(AWhileStmt node)
    {
        defaultIn(node);
    }

    public void outAWhileStmt(AWhileStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWhileStmt(AWhileStmt node)
    {
        inAWhileStmt(node);
        if(node.getWhile() != null)
        {
            node.getWhile().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getBoolExpr() != null)
        {
            node.getBoolExpr().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getStmt() != null)
        {
            node.getStmt().apply(this);
        }
        outAWhileStmt(node);
    }

    public void inAWhileStmtNoShortIf(AWhileStmtNoShortIf node)
    {
        defaultIn(node);
    }

    public void outAWhileStmtNoShortIf(AWhileStmtNoShortIf node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWhileStmtNoShortIf(AWhileStmtNoShortIf node)
    {
        inAWhileStmtNoShortIf(node);
        if(node.getWhile() != null)
        {
            node.getWhile().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getBoolExpr() != null)
        {
            node.getBoolExpr().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getStmtNoShortIf() != null)
        {
            node.getStmtNoShortIf().apply(this);
        }
        outAWhileStmtNoShortIf(node);
    }

    public void inAIfStmt(AIfStmt node)
    {
        defaultIn(node);
    }

    public void outAIfStmt(AIfStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfStmt(AIfStmt node)
    {
        inAIfStmt(node);
        if(node.getIf() != null)
        {
            node.getIf().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getBoolExpr() != null)
        {
            node.getBoolExpr().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getStmt() != null)
        {
            node.getStmt().apply(this);
        }
        outAIfStmt(node);
    }

    public void inAIfElseStmt(AIfElseStmt node)
    {
        defaultIn(node);
    }

    public void outAIfElseStmt(AIfElseStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfElseStmt(AIfElseStmt node)
    {
        inAIfElseStmt(node);
        if(node.getIf() != null)
        {
            node.getIf().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getBoolExpr() != null)
        {
            node.getBoolExpr().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getStmtNoShortIf() != null)
        {
            node.getStmtNoShortIf().apply(this);
        }
        if(node.getElse() != null)
        {
            node.getElse().apply(this);
        }
        if(node.getStmt() != null)
        {
            node.getStmt().apply(this);
        }
        outAIfElseStmt(node);
    }

    public void inAIfElseStmtNoShortIf(AIfElseStmtNoShortIf node)
    {
        defaultIn(node);
    }

    public void outAIfElseStmtNoShortIf(AIfElseStmtNoShortIf node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfElseStmtNoShortIf(AIfElseStmtNoShortIf node)
    {
        inAIfElseStmtNoShortIf(node);
        if(node.getIf() != null)
        {
            node.getIf().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getBoolExpr() != null)
        {
            node.getBoolExpr().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getIf1() != null)
        {
            node.getIf1().apply(this);
        }
        if(node.getElse() != null)
        {
            node.getElse().apply(this);
        }
        if(node.getIf2() != null)
        {
            node.getIf2().apply(this);
        }
        outAIfElseStmtNoShortIf(node);
    }

    public void inAUntilStmt(AUntilStmt node)
    {
        defaultIn(node);
    }

    public void outAUntilStmt(AUntilStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUntilStmt(AUntilStmt node)
    {
        inAUntilStmt(node);
        if(node.getCompoundStmt() != null)
        {
            node.getCompoundStmt().apply(this);
        }
        if(node.getUntil() != null)
        {
            node.getUntil().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getBoolExpr() != null)
        {
            node.getBoolExpr().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        outAUntilStmt(node);
    }

    public void inADoWhileStmt(ADoWhileStmt node)
    {
        defaultIn(node);
    }

    public void outADoWhileStmt(ADoWhileStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADoWhileStmt(ADoWhileStmt node)
    {
        inADoWhileStmt(node);
        if(node.getDo() != null)
        {
            node.getDo().apply(this);
        }
        if(node.getCompoundStmt() != null)
        {
            node.getCompoundStmt().apply(this);
        }
        if(node.getWhile() != null)
        {
            node.getWhile().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getBoolExpr() != null)
        {
            node.getBoolExpr().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        outADoWhileStmt(node);
    }

    public void inACompoundStmt(ACompoundStmt node)
    {
        defaultIn(node);
    }

    public void outACompoundStmt(ACompoundStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACompoundStmt(ACompoundStmt node)
    {
        inACompoundStmt(node);
        if(node.getLBrace() != null)
        {
            node.getLBrace().apply(this);
        }
        {
            List<PStmt> copy = new ArrayList<PStmt>(node.getStmt());
            for(PStmt e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getRBrace() != null)
        {
            node.getRBrace().apply(this);
        }
        outACompoundStmt(node);
    }

    public void inABoolExpr(ABoolExpr node)
    {
        defaultIn(node);
    }

    public void outABoolExpr(ABoolExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABoolExpr(ABoolExpr node)
    {
        inABoolExpr(node);
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getCompare() != null)
        {
            node.getCompare().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outABoolExpr(node);
    }

    public void inAAssnExpr(AAssnExpr node)
    {
        defaultIn(node);
    }

    public void outAAssnExpr(AAssnExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAssnExpr(AAssnExpr node)
    {
        inAAssnExpr(node);
        if(node.getAssignExpr() != null)
        {
            node.getAssignExpr().apply(this);
        }
        outAAssnExpr(node);
    }

    public void inARvalExpr(ARvalExpr node)
    {
        defaultIn(node);
    }

    public void outARvalExpr(ARvalExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARvalExpr(ARvalExpr node)
    {
        inARvalExpr(node);
        if(node.getRvalue() != null)
        {
            node.getRvalue().apply(this);
        }
        outARvalExpr(node);
    }

    public void inAMultassnExpr(AMultassnExpr node)
    {
        defaultIn(node);
    }

    public void outAMultassnExpr(AMultassnExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultassnExpr(AMultassnExpr node)
    {
        inAMultassnExpr(node);
        if(node.getMultassignExpr() != null)
        {
            node.getMultassignExpr().apply(this);
        }
        outAMultassnExpr(node);
    }

    public void inAPlusassnExpr(APlusassnExpr node)
    {
        defaultIn(node);
    }

    public void outAPlusassnExpr(APlusassnExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPlusassnExpr(APlusassnExpr node)
    {
        inAPlusassnExpr(node);
        if(node.getPlusassignExpr() != null)
        {
            node.getPlusassignExpr().apply(this);
        }
        outAPlusassnExpr(node);
    }

    public void inAAssignExpr(AAssignExpr node)
    {
        defaultIn(node);
    }

    public void outAAssignExpr(AAssignExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAssignExpr(AAssignExpr node)
    {
        inAAssignExpr(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getAssign() != null)
        {
            node.getAssign().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        outAAssignExpr(node);
    }

    public void inAMultassignExpr(AMultassignExpr node)
    {
        defaultIn(node);
    }

    public void outAMultassignExpr(AMultassignExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultassignExpr(AMultassignExpr node)
    {
        inAMultassignExpr(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getMultassign() != null)
        {
            node.getMultassign().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        outAMultassignExpr(node);
    }

    public void inAPlusassignExpr(APlusassignExpr node)
    {
        defaultIn(node);
    }

    public void outAPlusassignExpr(APlusassignExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPlusassignExpr(APlusassignExpr node)
    {
        inAPlusassignExpr(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getPlusassign() != null)
        {
            node.getPlusassign().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        outAPlusassignExpr(node);
    }

    public void inAPlusRvalue(APlusRvalue node)
    {
        defaultIn(node);
    }

    public void outAPlusRvalue(APlusRvalue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPlusRvalue(APlusRvalue node)
    {
        inAPlusRvalue(node);
        if(node.getRvalue() != null)
        {
            node.getRvalue().apply(this);
        }
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        outAPlusRvalue(node);
    }

    public void inAMinusRvalue(AMinusRvalue node)
    {
        defaultIn(node);
    }

    public void outAMinusRvalue(AMinusRvalue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMinusRvalue(AMinusRvalue node)
    {
        inAMinusRvalue(node);
        if(node.getRvalue() != null)
        {
            node.getRvalue().apply(this);
        }
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        outAMinusRvalue(node);
    }

    public void inATermRvalue(ATermRvalue node)
    {
        defaultIn(node);
    }

    public void outATermRvalue(ATermRvalue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATermRvalue(ATermRvalue node)
    {
        inATermRvalue(node);
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        outATermRvalue(node);
    }

    public void inAMultTerm(AMultTerm node)
    {
        defaultIn(node);
    }

    public void outAMultTerm(AMultTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultTerm(AMultTerm node)
    {
        inAMultTerm(node);
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        if(node.getMult() != null)
        {
            node.getMult().apply(this);
        }
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        outAMultTerm(node);
    }

    public void inADivTerm(ADivTerm node)
    {
        defaultIn(node);
    }

    public void outADivTerm(ADivTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADivTerm(ADivTerm node)
    {
        inADivTerm(node);
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        if(node.getDiv() != null)
        {
            node.getDiv().apply(this);
        }
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        outADivTerm(node);
    }

    public void inAFacTerm(AFacTerm node)
    {
        defaultIn(node);
    }

    public void outAFacTerm(AFacTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFacTerm(AFacTerm node)
    {
        inAFacTerm(node);
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        outAFacTerm(node);
    }

    public void inAParsFactor(AParsFactor node)
    {
        defaultIn(node);
    }

    public void outAParsFactor(AParsFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParsFactor(AParsFactor node)
    {
        inAParsFactor(node);
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        outAParsFactor(node);
    }

    public void inAUplusFactor(AUplusFactor node)
    {
        defaultIn(node);
    }

    public void outAUplusFactor(AUplusFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUplusFactor(AUplusFactor node)
    {
        inAUplusFactor(node);
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        outAUplusFactor(node);
    }

    public void inAUminusFactor(AUminusFactor node)
    {
        defaultIn(node);
    }

    public void outAUminusFactor(AUminusFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUminusFactor(AUminusFactor node)
    {
        inAUminusFactor(node);
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        outAUminusFactor(node);
    }

    public void inAIdFactor(AIdFactor node)
    {
        defaultIn(node);
    }

    public void outAIdFactor(AIdFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdFactor(AIdFactor node)
    {
        inAIdFactor(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAIdFactor(node);
    }

    public void inANumFactor(ANumFactor node)
    {
        defaultIn(node);
    }

    public void outANumFactor(ANumFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANumFactor(ANumFactor node)
    {
        inANumFactor(node);
        if(node.getNumber() != null)
        {
            node.getNumber().apply(this);
        }
        outANumFactor(node);
    }
}
