/* This file was generated by SableCC (http://www.sablecc.org/). */

package decaf.node;

import decaf.analysis.*;

@SuppressWarnings("nls")
public final class APlusRvalue extends PRvalue
{
    private PRvalue _rvalue_;
    private TPlus _plus_;
    private PTerm _term_;

    public APlusRvalue()
    {
        // Constructor
    }

    public APlusRvalue(
        @SuppressWarnings("hiding") PRvalue _rvalue_,
        @SuppressWarnings("hiding") TPlus _plus_,
        @SuppressWarnings("hiding") PTerm _term_)
    {
        // Constructor
        setRvalue(_rvalue_);

        setPlus(_plus_);

        setTerm(_term_);

    }

    @Override
    public Object clone()
    {
        return new APlusRvalue(
            cloneNode(this._rvalue_),
            cloneNode(this._plus_),
            cloneNode(this._term_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAPlusRvalue(this);
    }

    public PRvalue getRvalue()
    {
        return this._rvalue_;
    }

    public void setRvalue(PRvalue node)
    {
        if(this._rvalue_ != null)
        {
            this._rvalue_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rvalue_ = node;
    }

    public TPlus getPlus()
    {
        return this._plus_;
    }

    public void setPlus(TPlus node)
    {
        if(this._plus_ != null)
        {
            this._plus_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._plus_ = node;
    }

    public PTerm getTerm()
    {
        return this._term_;
    }

    public void setTerm(PTerm node)
    {
        if(this._term_ != null)
        {
            this._term_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._term_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._rvalue_)
            + toString(this._plus_)
            + toString(this._term_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._rvalue_ == child)
        {
            this._rvalue_ = null;
            return;
        }

        if(this._plus_ == child)
        {
            this._plus_ = null;
            return;
        }

        if(this._term_ == child)
        {
            this._term_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._rvalue_ == oldChild)
        {
            setRvalue((PRvalue) newChild);
            return;
        }

        if(this._plus_ == oldChild)
        {
            setPlus((TPlus) newChild);
            return;
        }

        if(this._term_ == oldChild)
        {
            setTerm((PTerm) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
