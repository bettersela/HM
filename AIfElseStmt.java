/* This file was generated by SableCC (http://www.sablecc.org/). */

package decaf.node;

import decaf.analysis.*;

@SuppressWarnings("nls")
public final class AIfElseStmt extends PIfElseStmt
{
    private TIf _if_;
    private TLPar _lPar_;
    private PBoolExpr _boolExpr_;
    private TRPar _rPar_;
    private PStmtNoShortIf _stmtNoShortIf_;
    private TElse _else_;
    private PStmt _stmt_;

    public AIfElseStmt()
    {
        // Constructor
    }

    public AIfElseStmt(
        @SuppressWarnings("hiding") TIf _if_,
        @SuppressWarnings("hiding") TLPar _lPar_,
        @SuppressWarnings("hiding") PBoolExpr _boolExpr_,
        @SuppressWarnings("hiding") TRPar _rPar_,
        @SuppressWarnings("hiding") PStmtNoShortIf _stmtNoShortIf_,
        @SuppressWarnings("hiding") TElse _else_,
        @SuppressWarnings("hiding") PStmt _stmt_)
    {
        // Constructor
        setIf(_if_);

        setLPar(_lPar_);

        setBoolExpr(_boolExpr_);

        setRPar(_rPar_);

        setStmtNoShortIf(_stmtNoShortIf_);

        setElse(_else_);

        setStmt(_stmt_);

    }

    @Override
    public Object clone()
    {
        return new AIfElseStmt(
            cloneNode(this._if_),
            cloneNode(this._lPar_),
            cloneNode(this._boolExpr_),
            cloneNode(this._rPar_),
            cloneNode(this._stmtNoShortIf_),
            cloneNode(this._else_),
            cloneNode(this._stmt_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAIfElseStmt(this);
    }

    public TIf getIf()
    {
        return this._if_;
    }

    public void setIf(TIf node)
    {
        if(this._if_ != null)
        {
            this._if_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._if_ = node;
    }

    public TLPar getLPar()
    {
        return this._lPar_;
    }

    public void setLPar(TLPar node)
    {
        if(this._lPar_ != null)
        {
            this._lPar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lPar_ = node;
    }

    public PBoolExpr getBoolExpr()
    {
        return this._boolExpr_;
    }

    public void setBoolExpr(PBoolExpr node)
    {
        if(this._boolExpr_ != null)
        {
            this._boolExpr_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._boolExpr_ = node;
    }

    public TRPar getRPar()
    {
        return this._rPar_;
    }

    public void setRPar(TRPar node)
    {
        if(this._rPar_ != null)
        {
            this._rPar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rPar_ = node;
    }

    public PStmtNoShortIf getStmtNoShortIf()
    {
        return this._stmtNoShortIf_;
    }

    public void setStmtNoShortIf(PStmtNoShortIf node)
    {
        if(this._stmtNoShortIf_ != null)
        {
            this._stmtNoShortIf_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._stmtNoShortIf_ = node;
    }

    public TElse getElse()
    {
        return this._else_;
    }

    public void setElse(TElse node)
    {
        if(this._else_ != null)
        {
            this._else_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._else_ = node;
    }

    public PStmt getStmt()
    {
        return this._stmt_;
    }

    public void setStmt(PStmt node)
    {
        if(this._stmt_ != null)
        {
            this._stmt_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._stmt_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._if_)
            + toString(this._lPar_)
            + toString(this._boolExpr_)
            + toString(this._rPar_)
            + toString(this._stmtNoShortIf_)
            + toString(this._else_)
            + toString(this._stmt_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._if_ == child)
        {
            this._if_ = null;
            return;
        }

        if(this._lPar_ == child)
        {
            this._lPar_ = null;
            return;
        }

        if(this._boolExpr_ == child)
        {
            this._boolExpr_ = null;
            return;
        }

        if(this._rPar_ == child)
        {
            this._rPar_ = null;
            return;
        }

        if(this._stmtNoShortIf_ == child)
        {
            this._stmtNoShortIf_ = null;
            return;
        }

        if(this._else_ == child)
        {
            this._else_ = null;
            return;
        }

        if(this._stmt_ == child)
        {
            this._stmt_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._if_ == oldChild)
        {
            setIf((TIf) newChild);
            return;
        }

        if(this._lPar_ == oldChild)
        {
            setLPar((TLPar) newChild);
            return;
        }

        if(this._boolExpr_ == oldChild)
        {
            setBoolExpr((PBoolExpr) newChild);
            return;
        }

        if(this._rPar_ == oldChild)
        {
            setRPar((TRPar) newChild);
            return;
        }

        if(this._stmtNoShortIf_ == oldChild)
        {
            setStmtNoShortIf((PStmtNoShortIf) newChild);
            return;
        }

        if(this._else_ == oldChild)
        {
            setElse((TElse) newChild);
            return;
        }

        if(this._stmt_ == oldChild)
        {
            setStmt((PStmt) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
